---
# Source: nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    component: "controller"
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress-controller
data:
  enable-vts-status: "false"

---
# Source: nginx-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress
---
# Source: nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-nginx-ingress
    namespace: default
---
# Source: nginx-ingress/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - namespaces
      - pods
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
---
# Source: nginx-ingress/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-nginx-ingress
    namespace: default
---
# Source: nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: '*.apps.cluster1.kops.integration.dsd.io'
    
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    component: "controller"
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress-controller
spec:
  clusterIP: ""
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
  selector:
    app: nginx-ingress
    component: "controller"
    release: RELEASE-NAME
  type: "LoadBalancer"

---
# Source: nginx-ingress/templates/default-backend-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    component: "default-backend"
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress-default-backend
spec:
  clusterIP: ""
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: nginx-ingress
    component: "default-backend"
    release: RELEASE-NAME
  type: "ClusterIP"

---
# Source: nginx-ingress/templates/controller-deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    component: "controller"
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress-controller
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    {}
    
  minReadySeconds: 0
  template:
    metadata:
      annotations:
        checksum/config: b747d3e6336cc043d7d046a411e35891fea8df4eaa6a430e7d5a7f8bc218a2b9
      labels:
        app: nginx-ingress
        component: "controller"
        release: RELEASE-NAME
    spec:
      containers:
        - name: nginx-ingress-controller
          image: "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.10.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - /nginx-ingress-controller
            - --default-backend-service=default/RELEASE-NAME-nginx-ingress-default-backend
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=default/RELEASE-NAME-nginx-ingress-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          resources:
            {}
            
      hostNetwork: false
      serviceAccountName: RELEASE-NAME-nginx-ingress
      terminationGracePeriodSeconds: 60

---
# Source: nginx-ingress/templates/default-backend-deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.9.1
    component: "default-backend"
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-nginx-ingress-default-backend
spec:
  replicas: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "default-backend"
        release: RELEASE-NAME
    spec:
      containers:
        - name: nginx-ingress-default-backend
          image: "k8s.gcr.io/defaultbackend:1.3"
          imagePullPolicy: "IfNotPresent"
          args:
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            {}
            
      terminationGracePeriodSeconds: 60

---
# Source: nginx-ingress/templates/controller-daemonset.yaml


---
# Source: nginx-ingress/templates/controller-hpa.yaml


---
# Source: nginx-ingress/templates/controller-metrics-service.yaml


---
# Source: nginx-ingress/templates/controller-stats-service.yaml


---
# Source: nginx-ingress/templates/headers-configmap.yaml


---
# Source: nginx-ingress/templates/tcp-configmap.yaml


---
# Source: nginx-ingress/templates/udp-configmap.yaml


